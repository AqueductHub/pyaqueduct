{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Aqueduct is a versatile experiment management system designed to streamline and simplify quantum system administration. Automation, data management and a multi-user platform come together to facilitate demanding experimental activities, through an intuitive, consistent, open interface. With robust security features including role-based access control and authentication, Aqueduct ensures data integrity and accessibility throughout the experiment pipeline.</p> <p>Aqueduct is an extensible platform, with a full API allowing connectivity with external systems, and an extensions SDK allowing extensions to expand core Aqueduct functionality in a flexible and secure way. This first version of Aqueduct contains data management tools that augment a lab\u2019s existing data storage systems by tracking critical settings, raw data and processed data from experiments, keeping them organised and readily accessible. Through convenient features such as tagging, favouriting, archiving, and annotation of experimental data, we facilitate a smoother data workflow for all labs. Aqueduct\u2019s software APIs make it possible to retrofit existing experiment scripts so that all the lab\u2019s data, not just the data produced by Deltaflow.Control, can be saved and accessed in a single, centralized location.</p> <p>This functionality is faciliated through 2 components: <code>aqueductcore</code> is  the server software that hosts the main application, web interface, and handles data storage. <code>pyaqueduct</code> is our python client which allows easy creation of experiments and upload of data and metadata for them.</p>"},{"location":"api-reference/","title":"Python API Reference","text":"<p>             Bases: <code>BaseModel</code></p> <p>Experiment model.</p>"},{"location":"api-reference/#pyaqueduct.API","title":"<code>pyaqueduct.API</code>","text":"<p>Aqueduct API interface to interact with experiments.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL of the Aqueduct server including the prefix.</p> required <code>timeout</code> <code>float</code> <p>Timeout of operations in seconds.</p> <code>0.5</code>"},{"location":"api-reference/#pyaqueduct.API.create_experiment","title":"<code>create_experiment(title, description)</code>","text":"<p>Create an experiment with specific title and description.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>Title of the experiment.</p> required <code>description</code> <code>str</code> <p>Description of the experiment.</p> required <p>Returns:</p> Type Description <code>Experiment</code> <p>Experiment object to interact with its data.</p>"},{"location":"api-reference/#pyaqueduct.API.find_experiments","title":"<code>find_experiments(search=None, limit=10, offset=0, tags=None, start_datetime=None, end_datetime=None)</code>","text":"<p>Find the experiments that have the search criteria provided in arguments.</p> <p>Parameters:</p> Name Type Description Default <code>search</code> <code>Optional[str]</code> <p>The string to search for in the title field of experiments.</p> <code>None</code> <code>limit</code> <code>PositiveInt</code> <p>The maximum number of experiments to fetch in a single request.</p> <code>10</code> <code>offset</code> <code>NonNegativeInt</code> <p>The number of experiments to skip from the beginning of the search results.</p> <code>0</code> <code>tags</code> <code>Optional[List[str]]</code> <p>List of tags to filter the experiments by.</p> <code>None</code> <code>start_datetime</code> <code>Optional[datetime]</code> <p>Start datetime to filter the experiments after this date and time.</p> <code>None</code> <code>end_datetime</code> <code>Optional[datetime]</code> <p>End datetime to filter the experiments before this date and time.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Experiment]</code> <p>List of experiment objects to operate on their data.</p>"},{"location":"api-reference/#pyaqueduct.API.get_experiment_by_eid","title":"<code>get_experiment_by_eid(eid)</code>","text":"<p>Get the experiment by the specified identifier to operate on.</p> <p>Parameters:</p> Name Type Description Default <code>eid</code> <code>str</code> <p>EID of the specified experiment.</p> required <p>Returns:</p> Type Description <code>Experiment</code> <p>Experiment object to interact with the experiment data.</p>"},{"location":"api-reference/#pyaqueduct.API.get_experiment_by_uuid","title":"<code>get_experiment_by_uuid(uuid)</code>","text":"<p>Get the experiment by the specified identifier to operate on.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>UUID</code> <p>UUID of the specified experiment.</p> required <p>Returns:</p> Type Description <code>Experiment</code> <p>Experiment object to interact with the experiment data.</p>"},{"location":"api-reference/#pyaqueduct.API.get_extensions","title":"<code>get_extensions()</code>","text":"<p>Gets the current fresh extension list from the server. Extension list may change without server restart.</p> <p>Returns:</p> Type Description <code>List[Extension]</code> <p>List of extension objects.</p>"},{"location":"api-reference/#pyaqueduct.API.get_task","title":"<code>get_task(task_id)</code>","text":"<p>Get task by passing task_id.</p> <p>Returns:</p> Type Description <code>Task</code> <p>Task object</p>"},{"location":"api-reference/#pyaqueduct.API.get_tasks","title":"<code>get_tasks(limit=10, offset=0, extension_name=None, experiment_uuid=None, action_name=None, username=None, start_date=None, end_date=None)</code>","text":"<p>Get task by passing task_id.</p> <p>Returns:</p> Type Description <code>List[Task]</code> <p>Task object</p>"},{"location":"api-reference/#pyaqueduct.API.remove_experiment_by_eid","title":"<code>remove_experiment_by_eid(eid)</code>","text":"<p>Remove experiment from the database. Experiment's files will be also removed.</p> <p>Parameters:</p> Name Type Description Default <code>eid</code> <code>str</code> <p>EID of the specified experiment.</p> required"},{"location":"api-reference/#pyaqueduct.experiment.Experiment.created_at","title":"<code>created_at: datetime</code>  <code>instance-attribute</code>","text":"<p>Creation datetime of the experiment.</p>"},{"location":"api-reference/#pyaqueduct.experiment.Experiment.description","title":"<code>description: str</code>  <code>property</code> <code>writable</code>","text":"<p>Get description of experiment.</p>"},{"location":"api-reference/#pyaqueduct.experiment.Experiment.eid","title":"<code>eid: str</code>  <code>instance-attribute</code>","text":"<p>EID of the experiment. User-readable identifier, it is unique within one Aqueduct installation</p>"},{"location":"api-reference/#pyaqueduct.experiment.Experiment.files","title":"<code>files: List[Tuple[str, datetime]]</code>  <code>property</code>","text":"<p>Get file names of expriment.</p>"},{"location":"api-reference/#pyaqueduct.experiment.Experiment.tags","title":"<code>tags: List[str]</code>  <code>property</code>","text":"<p>Gets tags of experiment.</p>"},{"location":"api-reference/#pyaqueduct.experiment.Experiment.title","title":"<code>title: str</code>  <code>property</code> <code>writable</code>","text":"<p>Get title of experiment.</p>"},{"location":"api-reference/#pyaqueduct.experiment.Experiment.updated_at","title":"<code>updated_at: datetime</code>  <code>property</code>","text":"<p>Get last updated datetime of the experiment.</p>"},{"location":"api-reference/#pyaqueduct.experiment.Experiment.uuid","title":"<code>uuid: UUID</code>  <code>instance-attribute</code>","text":"<p>UUID of the experiment. This is an internal experiment identifier in the database</p>"},{"location":"api-reference/#pyaqueduct.experiment.Experiment.add_tags","title":"<code>add_tags(tags)</code>","text":"<p>Add new tags to experiment.</p> <p>Parameters:</p> Name Type Description Default <code>tags</code> <code>List[str]</code> <p>List of tags to be added to the experiment.</p> required"},{"location":"api-reference/#pyaqueduct.experiment.Experiment.download_file","title":"<code>download_file(file_name, destination_dir)</code>","text":"<p>Download the specified file of experiment.</p>"},{"location":"api-reference/#pyaqueduct.experiment.Experiment.remove_files","title":"<code>remove_files(files)</code>","text":"<p>Remove files from experiment.</p> <p>Parameters:</p> Name Type Description Default <code>files</code> <code>List[str]</code> <p>List of file names to be removed from the experiment.</p> required"},{"location":"api-reference/#pyaqueduct.experiment.Experiment.remove_tag","title":"<code>remove_tag(tag)</code>","text":"<p>Remove tag from experiment.</p>"},{"location":"api-reference/#pyaqueduct.experiment.Experiment.upload_file","title":"<code>upload_file(file)</code>","text":"<p>Upload the specified file to experiment.</p>"},{"location":"api-reference/#pyaqueduct.extensions","title":"<code>pyaqueduct.extensions</code>","text":"<p>The module contains classes representing interface with extensions. Extension list may be retrieved from the server using api method <code>API.get_extensions()</code>. Each extension may have one or more actions. Each action has a list of expected parameters.</p>"},{"location":"api-reference/#pyaqueduct.extensions.Extension","title":"<code>Extension</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Class represents an extension as a collection of actions.</p> Source code in <code>pyaqueduct/extensions.py</code> <pre><code>class Extension(BaseModel):\n    \"\"\"Class represents an extension as a collection of actions.\"\"\"\n\n    name: str\n    \"\"\"Extension name. Unique name within a server\"\"\"\n\n    description: Optional[str]\n    \"\"\"Description of extension scope and overview of its actions.\"\"\"\n\n    authors: str\n    \"\"\"Authors of the extension.\"\"\"\n\n    actions: List[ExtensionAction]\n\n    def __init__(\n        self,\n        name: str,\n        description: Optional[str],\n        authors: str,\n        actions: List[ExtensionActionData],\n        client: AqueductClient,\n    ):\n        super().__init__(name=name, description=description, authors=authors, actions=[])\n        for action in actions:\n            self.actions.append(ExtensionAction(self, action, client))\n</code></pre>"},{"location":"api-reference/#pyaqueduct.extensions.Extension.authors","title":"<code>authors: str</code>  <code>instance-attribute</code>","text":"<p>Authors of the extension.</p>"},{"location":"api-reference/#pyaqueduct.extensions.Extension.description","title":"<code>description: Optional[str]</code>  <code>instance-attribute</code>","text":"<p>Description of extension scope and overview of its actions.</p>"},{"location":"api-reference/#pyaqueduct.extensions.Extension.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":"<p>Extension name. Unique name within a server</p>"},{"location":"api-reference/#pyaqueduct.extensions.ExtensionAction","title":"<code>ExtensionAction</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Extension action representation. Contains an execution method which trigger extension action execution on the side of Aqueduct server.</p> Source code in <code>pyaqueduct/extensions.py</code> <pre><code>class ExtensionAction(BaseModel):\n    \"\"\"Extension action representation. Contains an execution method\n    which trigger extension action execution on the side of Aqueduct server.\"\"\"\n\n    parameters: List[ExtensionParameterData]\n    \"\"\"List of parameters which extension action expects to accept.\"\"\"\n\n    data: ExtensionActionData\n    extension: Extension = None\n    \"\"\"Extension to which this action belongs.\"\"\"\n\n    _client: AqueductClient = None\n\n    def __init__(\n        self,\n        extension: Extension,\n        action_data: ExtensionAction,\n        client: AqueductClient,\n    ):\n        super().__init__(extension=extension, data=action_data, parameters=action_data.parameters)\n        self._client = client\n\n    @property\n    def name(self) -&gt; str:\n        \"\"\"Extension action name. Unique inside an extension.\"\"\"\n        return self.data.name\n\n    @property\n    def description(self) -&gt; str:\n        \"\"\"Detailed description of the extension action.\"\"\"\n        return self.data.description\n\n    @property\n    def experiment_variable_name(self) -&gt; str:\n        \"\"\"Name of the variable which is used to define a default experiment.\n        This experiment will be used to save logs and validate variables\n        of `file` type.\"\"\"\n        return self.data.experimentVariableName\n\n    def execute(self, parameters: Dict[str, Any]) -&gt; ExtensionExecutionResultData:\n        \"\"\"Execute an extension action on a server.\n\n        Args:\n            parameters: dictionary of parameters to pass to an extension.\n\n        Returns:\n            result of extension execution on server. `returnCode==0` corresponds to success.\n        \"\"\"\n        return self._client.execute_extension_action(\n            extension=self.extension.name,\n            action=self.data.name,\n            params=parameters,\n        )\n</code></pre>"},{"location":"api-reference/#pyaqueduct.extensions.ExtensionAction.description","title":"<code>description: str</code>  <code>property</code>","text":"<p>Detailed description of the extension action.</p>"},{"location":"api-reference/#pyaqueduct.extensions.ExtensionAction.experiment_variable_name","title":"<code>experiment_variable_name: str</code>  <code>property</code>","text":"<p>Name of the variable which is used to define a default experiment. This experiment will be used to save logs and validate variables of <code>file</code> type.</p>"},{"location":"api-reference/#pyaqueduct.extensions.ExtensionAction.extension","title":"<code>extension: Extension = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Extension to which this action belongs.</p>"},{"location":"api-reference/#pyaqueduct.extensions.ExtensionAction.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>Extension action name. Unique inside an extension.</p>"},{"location":"api-reference/#pyaqueduct.extensions.ExtensionAction.parameters","title":"<code>parameters: List[ExtensionParameterData]</code>  <code>instance-attribute</code>","text":"<p>List of parameters which extension action expects to accept.</p>"},{"location":"api-reference/#pyaqueduct.extensions.ExtensionAction.execute","title":"<code>execute(parameters)</code>","text":"<p>Execute an extension action on a server.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>Dict[str, Any]</code> <p>dictionary of parameters to pass to an extension.</p> required <p>Returns:</p> Type Description <code>ExtensionExecutionResultData</code> <p>result of extension execution on server. <code>returnCode==0</code> corresponds to success.</p> Source code in <code>pyaqueduct/extensions.py</code> <pre><code>def execute(self, parameters: Dict[str, Any]) -&gt; ExtensionExecutionResultData:\n    \"\"\"Execute an extension action on a server.\n\n    Args:\n        parameters: dictionary of parameters to pass to an extension.\n\n    Returns:\n        result of extension execution on server. `returnCode==0` corresponds to success.\n    \"\"\"\n    return self._client.execute_extension_action(\n        extension=self.extension.name,\n        action=self.data.name,\n        params=parameters,\n    )\n</code></pre>"},{"location":"extensions/","title":"What is an extension in Aqueduct","text":"<p>Extensions are custom software features which may be added to an existing instance of the  Aqueduct server by its administator. This may be, for example, data generation and processing,  remote service usage, or image plotting. These features are available to Aqueduct users in the web interface and through <code>pyaqueduct</code> client python library.</p> <p>Each extension is a collection of actions. One extension may have one or more actions. Actions of one extension may perform different operations, but on the server side they share settings and execution environment.</p> <p>Extension actions are expected to read data from experiments and record their results to experiments. Extension execution logs are also persisted in the experiment which extension action was accessing.</p>"},{"location":"extensions/#extensions-in-pyaqueduct-library","title":"Extensions in <code>pyaqueduct</code> library","text":"<p>Python API allows to list and execute extensions from code. Classes of  <code>pyaqueduct.extension</code> module represent extensions, their actions,  and execution results.</p>"},{"location":"extensions/#which-extensions-are-available","title":"Which extensions are available","text":"<p><code>pyaqueduct.API.get_extensions</code> method is responsible for listing extensions available for execution. Here is an example of the code to access extensions, their actions and action definitions:</p> <pre><code>from pyaqueduct import API\n\napi = API(\"http://localhost:8000\", timeout=100)\nextensions = api.get_extensions()  # list of extensions\nfor extension in extensions:\n    print(f\"Extension `{extension.name}` by {extension.authors}: {extension.description}.\")\n    for action in extension.actions:\n        print(f\"&gt; Action {action.name}: {action.description}\")\n        for parameter in action.parameters:\n            print(\n                f\"&gt; &gt; Parameter {parameter.displayName} ({parameter.name}, {parameter.dataType}):\"\n                f\" {parameter.description}\")\n</code></pre>"},{"location":"extensions/#executing-an-extension","title":"Executing an extension","text":"<p>As shown above, extension actions accept named parameters. Their definitions are given  in <code>ExtensionAction.parameters</code> collection. Each definition includes name, type, display  name, and may include description and default values.</p> <p>To run an extension on a server, the method <code>ExtensionAction.execute()</code> accepts a dictionary, where keys are parameter names, and values are arguments to pass. Please note, that values may be of any simple type, while being sent to a server, they are converted into strings. Data types allowed in extensions are: - <code>str</code> and <code>textarea</code> \u2014 arbitrary strings. - <code>experiment</code> \u2014 string with an experiment ID (EID). - <code>file</code> \u2014 string with a file name inside and experiment. - <code>select</code> \u2014 string, one of the listed options. - <code>float</code>, <code>int</code> \u2014 numerical types. - <code>bool</code> \u2014 <code>True</code> or <code>False</code>.</p> <p>Here is the example of calling an example extension. Logs of the execution  (process return code, standard output and standard error streams) are saved to the experiment.</p> <pre><code>api = API(\"http://localhost:8000\", timeout=100)\nexp = api.create_experiment(\n            title=\"test experiment\",\n            description=\"testing extensions\")\n\nextensions = api.get_extensions()\n# choose an example extension by name\nextension = [p for p in extensions if p.name == \"Dummy extension\"][0]\naction = extension.actions[0]\n\nresult = action.execute({\n    \"var1\": \"string value\",\n    \"var2\": 1,\n    \"var3\": .31415e+1,\n    \"var4\": exp.alias,\n    \"var5\": \"text\\nin\\nmultiple\\nstrings\",\n    \"var6\": True,\n    \"var7\": \"string1\",\n})\nprint(f\"success: {result.returnCode == 0}\")\n\n# download a log file into a current working directory\nexp.download_file(file_name=result.logFile, destination_dir=\".\")\n# print the log file content\nwith open(\"./\" + result.logFile) as f:\n    print(f.read())\n</code></pre>"},{"location":"getting-started/","title":"PyAqueduct Application Programming Interface (API) Tutorial","text":"<p>In this tutorial, the API of PyAqueduct is introduced by working on a sample experiment. The sample experiment generates some results in the form of different files such as CSV, JSON, HDF5, and image files. Each execution of the experiment generates new set of files and therefore, is treated as a new experiment run.</p>"},{"location":"getting-started/#experiment-analysis-a-projectile-motion","title":"Experiment: analysis a projectile motion","text":"<pre><code># Install experiment dependecies.\nimport sys\n!{sys.executable} -m pip install numpy pandas matplotlib h5py\n</code></pre> <pre><code>import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport json\nimport h5py\n\n\ndef simulate_projectile_motion(v0: float, angle: float, g: float = 9.81) -&gt; pd.DataFrame:\n    \"\"\"\n    Simulates the projectile motion.\n\n    Args:\n        v0: Initial velocity in m/s.\n        angle: Launch angle in degrees.\n        g: Acceleration due to gravity in m/s^2 (default is 9.81).\n\n    Returns:\n        DataFrame containing time, x and y positions.\n    \"\"\"\n    # Time of flight calculation\n    t_max = 2 * v0 * np.sin(np.radians(angle)) / g\n    time_steps = np.linspace(0, t_max, num=50)\n\n    # Position calculations\n    x = v0 * np.cos(np.radians(angle)) * time_steps\n    y = v0 * np.sin(np.radians(angle)) * time_steps - 0.5 * g * time_steps**2\n\n    return pd.DataFrame({\"Time (s)\": time_steps, \"X Position (m)\": x, \"Y Position (m)\": y})\n\n\ndef save_data_formats(data: pd.DataFrame, base_path: str) -&gt; None:\n    \"\"\"\n    Saves data in different formats: CSV, JSON, and HDF5.\n\n    Args:\n        data: Data to save.\n        base_path: Base file path without extension.\n    \"\"\"\n    # CSV\n    csv_path = f\"{base_path}.csv\"\n    data.to_csv(csv_path, index=False)\n\n    # JSON\n    json_path = f\"{base_path}.json\"\n    with open(json_path, \"w\") as json_file:\n        json.dump(data.to_dict(orient=\"records\"), json_file)\n\n    # HDF5\n    hdf5_path = f\"{base_path}.hdf5\"\n    with h5py.File(hdf5_path, \"w\") as hdf_file:\n        for column in data.columns:\n            hdf_file.create_dataset(column, data=data[column].values)\n\n\ndef plot_trajectory(data: pd.DataFrame, image_path: str) -&gt; None:\n    \"\"\"\n    Plots the trajectory of the projectile motion.\n\n    Args:\n        data: Data containing the trajectory.\n        image_path: Path to save the plot image.\n    \"\"\"\n    plt.figure(figsize=(8, 6))\n    plt.plot(data[\"X Position (m)\"], data[\"Y Position (m)\"])\n    plt.title(\"Projectile Motion Trajectory\")\n    plt.xlabel(\"X Position (m)\")\n    plt.ylabel(\"Y Position (m)\")\n    plt.grid(True)\n    plt.savefig(image_path)\n\n\n# Parameters for the simulation\ninitial_velocity = 20  # m/s\nlaunch_angle = 45  # degrees\n\n# Simulate the projectile motion\nprojectile_data = simulate_projectile_motion(initial_velocity, launch_angle)\n\n# Save the data in different formats\nbase_file_path = os.path.join(os.getcwd(), \"projectile_motion\")\nsave_data_formats(projectile_data, base_file_path)\n\n# Plot and save the trajectory\nplot_image_path = os.path.join(os.getcwd(), \"projectile_motion_plot.png\")\n\nplot_trajectory(projectile_data, plot_image_path)\n\nprint(\"Simulation and data processing completed.\")\n</code></pre>"},{"location":"getting-started/#create-experiment-on-aqueudct","title":"Create experiment on Aqueudct","text":"<pre><code>from pyaqueduct import API\n\napi = API(\"[AQUEDUCT_SERVER_URL_PLACE_HOLDER]\", timeout=1)\n\nexperiment = api.create_experiment(\n    title=\"Motion Simulation Experiment\", description=\"Tutorial experiment: motion simulation.\"\n)\n\nprint(f\"Experiment created with unique id: {experiment.eid}\")\n</code></pre>"},{"location":"getting-started/#add-tags-to-experiment","title":"Add tags to experiment","text":"<pre><code>experiment.add_tags([\"motion\", \"simulation\", \"notebook\"])\n\nexperiment.tags\n</code></pre>"},{"location":"getting-started/#remove-tags-from-experiment","title":"Remove tags from experiment","text":"<pre><code>experiment.remove_tag(\"simulation\")\nexperiment.remove_tag(\"notebook\")\n\nexperiment.tags\n</code></pre>"},{"location":"getting-started/#update-experiment-and-file-downloadupload","title":"Update experiment and file download/upload","text":"<pre><code>experiment.title = \"Motion Simulation\"\nexperiment.description = \"Motion Simulation\"\n\nprint(f\"Experiment title: {experiment.title}\")\nprint(f\"Experiment title: {experiment.description}\")\nprint(f\"Experiment creation date: {experiment.created_at}\")\nprint(f\"Experiment last update date: {experiment.updated_at}\")\nprint(f\"Experiment tags: {experiment.tags}\")\n</code></pre>"},{"location":"getting-started/#upload-files","title":"Upload files","text":"<pre><code>experiment.upload_file(file=\"projectile_motion.csv\")\nexperiment.upload_file(file=\"projectile_motion.json\")\nexperiment.upload_file(file=\"projectile_motion.hdf5\")\nexperiment.upload_file(file=\"projectile_motion_plot.png\")\n</code></pre>"},{"location":"getting-started/#download-files","title":"Download files","text":"<pre><code>download_dir = os.path.join(os.getcwd(), \"downloads\")\nif not os.path.exists(download_dir):\n    os.makedirs(download_dir)\n\nexperiment.download_file(file_name=\"projectile_motion.csv\", destination_dir=download_dir)\nexperiment.download_file(file_name=\"projectile_motion.json\", destination_dir=download_dir)\nexperiment.download_file(file_name=\"projectile_motion.hdf5\", destination_dir=download_dir)\nexperiment.download_file(file_name=\"projectile_motion_plot.png\", destination_dir=download_dir)\n</code></pre>"},{"location":"getting-started/#remove-files","title":"Remove files","text":"<pre><code>experiment.remove_files([\"projectile_motion.csv\", \"projectile_motion.json\"])\n</code></pre>"},{"location":"getting-started/#get-specific-experiment","title":"Get specific experiment","text":"<pre><code>experiment = api.get_experiment_by_eid(experiment.eid)\nexperiment = api.get_experiment_by_uuid(experiment.uuid)\n\nprint(f\"Experiment title: {experiment.title}\")\nprint(f\"Experiment title: {experiment.description}\")\nprint(f\"Experiment creation date: {experiment.created_at}\")\nprint(f\"Experiment last update date: {experiment.updated_at}\")\nprint(f\"Experiment tags: {experiment.tags}\")\n</code></pre>"},{"location":"getting-started/#search-through-experiments","title":"Search through Experiments","text":"<pre><code>from datetime import datetime, timedelta\n\n# Search through the experiments by their title or experiment ID. It will return all experiments where search string is a substring of the title or the experiment ID\nexperiments_list = api.find_experiments(search=\"[search criteria, experiment title or EID]\")\n\n# Find experiments that the ALL of provided tags in the argument are assigned them. It is an AND operation between the tags when searching through experiments.\nexperiments_list = api.find_experiments(tags=[\"tag1\", \"tag2\"])\n\n# Find experiments with creation datetime after the specified datetime.\nexperiments_list = api.find_experiments(start_datetime=datetime.now() - timedelta(days=1))\n\n# Find experiments with creation datetime before the specified datetime.\nexperiments_list = api.find_experiments(end_datetime=datetime.now() + timedelta(days=1))\n\n# Find experiments with creation datetime between the specified datetimes.\nexperiments_list = api.find_experiments(\n    start_datetime=datetime.now() - timedelta(days=1),\n    end_datetime=datetime.now() + timedelta(days=1),\n)\n\n\n# You can also limit the results via pagination (default limit is 10 items per page) ordered by creation datetime.\n# In this example we only retrieve maximum 20 experimets starting from the 10th experiment (inclusive) with the specified tags.\nexperiments_list = api.find_experiments(limit=20, offset=10, tags=[\"tag1\", \"tag2\"])\n</code></pre>"},{"location":"getting-started/#removing-experiments","title":"Removing Experiments","text":"<pre><code># Experiments and their files can be removed from the database. Use it with caution\n# as this operation is not revertible.\napi.remove_experiment_by_eid(eid=\"[experiment EID]\")\n</code></pre>"}]}