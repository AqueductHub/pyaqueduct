{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Aqueduct Python Client","text":"<p>Aqueduct, an experiment control software (ECS) is what we call the collection of software that labs use to run experiments. Every lab, whether commercial or academic, has an ECS (albeit with varying capabilities). The opportunity in this space we see is that existing ECS solutions are mediocre and emerging use-cases for quantum computing (QC) systems are introducing new software infrastructure requirements that labs do not want to develop on their own. Key examples of these new needs can be observed in the software needed in testbed systems: support for multiple users, better data management systems, and automation.</p> <p>The minimum viable product (MVP) we are launching is a system for storing, browsing and searching experiment results. A data management system is a key requirement for larger systems that will be shared (e.g., testbeds) as users will not want their data intermingled with that of others. Our overwhelming observation is that the quantum ecosystem lacks good data management solutions. Furthermore, data management is a minimally disruptive to the work the lab does and can adapt to many lab setups; as such it is low risk for many labs to test the product.</p> <p>Our goal is to develop a set of usable, reliable, and well-supported software tools that will displace the hand-rolled and brittle software that currently runs most labs. Our business strategy segments our users based on whether they are running experiments (e.g., academic labs, startup commercial labs) of if they are building larger systems or testbeds (e.g., scale ups). This segmentation is conducive to a freemium model: we will give away software to users, who will self-serve, in the former category to increase credibility, build goodwill and drive adoption. We will monetise the latter category by selling premium versions of the software with features relevant to that segment, along with charging for the work needed to integrate our software with the rest of their system.</p>"},{"location":"api-reference/","title":"Python API Reference","text":"<p>             Bases: <code>BaseModel</code></p> <p>Experiment model.</p>"},{"location":"api-reference/#aqueductpy.API","title":"<code>aqueductpy.API</code>","text":"<p>Aqueduct API interface to interact with experiments.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL of the Aqueduct server including the prefix.</p> required <code>timeout</code> <code>float</code> <p>timeout of operations in seconds.</p> <code>0.5</code>"},{"location":"api-reference/#aqueductpy.API.create_experiment","title":"<code>create_experiment(title=Field(..., min_length=1, max_length=_MAX_TITLE_LENGTH), description=Field('', max_length=_MAX_DESCRIPTION_LENGTH))</code>","text":"<p>Create an experiment with specific title and description.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>Title of the experiment.</p> <code>Field(..., min_length=1, max_length=_MAX_TITLE_LENGTH)</code> <code>description</code> <code>str</code> <p>Description of the experiment.</p> <code>Field('', max_length=_MAX_DESCRIPTION_LENGTH)</code> <p>Returns:</p> Type Description <code>Experiment</code> <p>Experiment object to interact with its data.</p>"},{"location":"api-reference/#aqueductpy.API.find_experiments","title":"<code>find_experiments(search, limit, offset=0)</code>","text":"<p>Find the experiments that have the search criteria in their title or id.</p> <p>Parameters:</p> Name Type Description Default <code>search</code> <code>str</code> <p>Search string to match.</p> required <p>Returns:</p> Type Description <code>List[Experiment]</code> <p>List of experiment objects to operate on their data.</p>"},{"location":"api-reference/#aqueductpy.API.get_experiment","title":"<code>get_experiment(alias)</code>","text":"<p>Get the experiment by the specified identifier to operate on.</p> <p>Parameters:</p> Name Type Description Default <code>experiment_id</code> <p>ID of the specified experiment.</p> required <p>Returns:</p> Type Description <code>Experiment</code> <p>Experiment object to interact with the experiment data.</p>"},{"location":"api-reference/#aqueductpy.experiment.Experiment.alias","title":"<code>alias: str</code>  <code>instance-attribute</code>","text":"<p>Alias of the experiment.</p>"},{"location":"api-reference/#aqueductpy.experiment.Experiment.client","title":"<code>client: AqueductClient</code>  <code>instance-attribute</code>","text":"<p>Client object reference.</p>"},{"location":"api-reference/#aqueductpy.experiment.Experiment.created_at","title":"<code>created_at: datetime</code>  <code>instance-attribute</code>","text":"<p>Creation datetime of the experiment.</p>"},{"location":"api-reference/#aqueductpy.experiment.Experiment.description","title":"<code>description: str</code>  <code>property</code> <code>writable</code>","text":"<p>Get description of experiment.</p>"},{"location":"api-reference/#aqueductpy.experiment.Experiment.files","title":"<code>files: List[Tuple[str, datetime]]</code>  <code>property</code>","text":"<p>Get file names of expriment.</p>"},{"location":"api-reference/#aqueductpy.experiment.Experiment.id","title":"<code>id: UUID</code>  <code>instance-attribute</code>","text":"<p>Unique ID of the experiment.</p>"},{"location":"api-reference/#aqueductpy.experiment.Experiment.tags","title":"<code>tags: List[str]</code>  <code>property</code>","text":"<p>Gets tags of experiment.</p>"},{"location":"api-reference/#aqueductpy.experiment.Experiment.title","title":"<code>title: str</code>  <code>property</code> <code>writable</code>","text":"<p>Get title of experiment.</p>"},{"location":"api-reference/#aqueductpy.experiment.Experiment.updated_at","title":"<code>updated_at: datetime</code>  <code>property</code>","text":"<p>Get last updated datetime of the experiment.</p>"},{"location":"api-reference/#aqueductpy.experiment.Experiment.add_tag","title":"<code>add_tag(tag=Field(..., max_length=_MAX_TAG_LENGTH))</code>","text":"<p>Add new tag to experiment.</p>"},{"location":"api-reference/#aqueductpy.experiment.Experiment.download_file","title":"<code>download_file(file_name, destination_dir)</code>","text":"<p>Download the specified file of experiment.</p>"},{"location":"api-reference/#aqueductpy.experiment.Experiment.remove_tag","title":"<code>remove_tag(tag=Field(..., max_length=_MAX_TAG_LENGTH))</code>","text":"<p>Remove tag from experiment.</p>"},{"location":"api-reference/#aqueductpy.experiment.Experiment.upload_file","title":"<code>upload_file(file)</code>","text":"<p>Upload the specified file to experiment.</p>"}]}